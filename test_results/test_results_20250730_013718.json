{
  "success": false,
  "tests": [
    {
      "name": "tests/integration/test_pet_clinic_integration.py::TestPetClinicIntegration::test_load_pet_clinics_with_mock_api",
      "status": "FAILED",
      "duration": null
    },
    {
      "name": "tests/integration/test_pet_clinic_integration.py::TestPetClinicIntegration::test_api_client_with_real_endpoint",
      "status": "PASSED",
      "duration": null
    },
    {
      "name": "tests/integration/test_pet_clinic_integration.py::TestPetClinicIntegration::test_api_client_error_handling",
      "status": "PASSED",
      "duration": null
    },
    {
      "name": "tests/integration/test_pet_clinic_integration.py::TestPetClinicIntegration::test_api_client_with_headers",
      "status": "PASSED",
      "duration": null
    },
    {
      "name": "tests/integration/test_pet_clinic_integration.py::TestPetClinicIntegration::test_api_client_with_query_params",
      "status": "PASSED",
      "duration": null
    },
    {
      "name": "tests/integration/test_pet_clinic_integration.py::TestPetClinicIntegration::test_api_client_timeout",
      "status": "FAILED",
      "duration": null
    },
    {
      "name": "tests/unit/test_api_client.py::TestAPIClient::test_init",
      "status": "PASSED",
      "duration": null
    },
    {
      "name": "tests/unit/test_api_client.py::TestAPIClient::test_init_with_custom_params",
      "status": "PASSED",
      "duration": null
    },
    {
      "name": "tests/unit/test_api_client.py::TestAPIClient::test_build_url",
      "status": "PASSED",
      "duration": null
    },
    {
      "name": "tests/unit/test_api_client.py::TestAPIClient::test_context_manager",
      "status": "PASSED",
      "duration": null
    },
    {
      "name": "tests/unit/test_api_client.py::TestAPIClient::test_get_request_success",
      "status": "FAILED",
      "duration": null
    },
    {
      "name": "tests/unit/test_api_client.py::TestAPIClient::test_post_request_success",
      "status": "FAILED",
      "duration": null
    },
    {
      "name": "tests/unit/test_api_client.py::TestAPIClient::test_client_error_handling",
      "status": "PASSED",
      "duration": null
    },
    {
      "name": "tests/unit/test_api_client.py::TestAPIClient::test_server_error_handling",
      "status": "PASSED",
      "duration": null
    },
    {
      "name": "tests/unit/test_api_client.py::TestAPIClient::test_connection_error_handling",
      "status": "PASSED",
      "duration": null
    },
    {
      "name": "tests/unit/test_api_client.py::TestAPIClient::test_timeout_error_handling",
      "status": "PASSED",
      "duration": null
    },
    {
      "name": "tests/unit/test_api_client.py::TestAPIClient::test_all_http_methods",
      "status": "PASSED",
      "duration": null
    }
  ],
  "summary": {
    "total": 17,
    "passed": 13,
    "failed": 4,
    "skipped": 0
  },
  "stdout": "============================= test session starts =============================\nplatform win32 -- Python 3.13.5, pytest-8.4.1, pluggy-1.6.0 -- C:\\Users\\sbkyo\\Development\\pet-happy-living-api\\.venv\\Scripts\\python.exe\ncachedir: .pytest_cache\nmetadata: {'Python': '3.13.5', 'Platform': 'Windows-11-10.0.26100-SP0', 'Packages': {'pytest': '8.4.1', 'pluggy': '1.6.0'}, 'Plugins': {'anyio': '4.9.0', 'asyncio': '1.1.0', 'json-report': '1.5.0', 'metadata': '3.1.1'}}\nrootdir: C:\\Users\\sbkyo\\Development\\pet-happy-living-api\nplugins: anyio-4.9.0, asyncio-1.1.0, json-report-1.5.0, metadata-3.1.1\nasyncio: mode=Mode.STRICT, asyncio_default_fixture_loop_scope=None, asyncio_default_test_loop_scope=function\ncollecting ... collected 17 items\n\ntests/integration/test_pet_clinic_integration.py::TestPetClinicIntegration::test_load_pet_clinics_with_mock_api FAILED [  5%]\ntests/integration/test_pet_clinic_integration.py::TestPetClinicIntegration::test_api_client_with_real_endpoint PASSED [ 11%]\ntests/integration/test_pet_clinic_integration.py::TestPetClinicIntegration::test_api_client_error_handling PASSED [ 17%]\ntests/integration/test_pet_clinic_integration.py::TestPetClinicIntegration::test_api_client_with_headers PASSED [ 23%]\ntests/integration/test_pet_clinic_integration.py::TestPetClinicIntegration::test_api_client_with_query_params PASSED [ 29%]\ntests/integration/test_pet_clinic_integration.py::TestPetClinicIntegration::test_api_client_timeout FAILED [ 35%]\ntests/unit/test_api_client.py::TestAPIClient::test_init PASSED           [ 41%]\ntests/unit/test_api_client.py::TestAPIClient::test_init_with_custom_params PASSED [ 47%]\ntests/unit/test_api_client.py::TestAPIClient::test_build_url PASSED      [ 52%]\ntests/unit/test_api_client.py::TestAPIClient::test_context_manager PASSED [ 58%]\ntests/unit/test_api_client.py::TestAPIClient::test_get_request_success FAILED [ 64%]\ntests/unit/test_api_client.py::TestAPIClient::test_post_request_success FAILED [ 70%]\ntests/unit/test_api_client.py::TestAPIClient::test_client_error_handling PASSED [ 76%]\ntests/unit/test_api_client.py::TestAPIClient::test_server_error_handling PASSED [ 82%]\ntests/unit/test_api_client.py::TestAPIClient::test_connection_error_handling PASSED [ 88%]\ntests/unit/test_api_client.py::TestAPIClient::test_timeout_error_handling PASSED [ 94%]\ntests/unit/test_api_client.py::TestAPIClient::test_all_http_methods PASSED [100%]\n\n================================== FAILURES ===================================\n________ TestPetClinicIntegration.test_load_pet_clinics_with_mock_api _________\n\nself = <tests.integration.test_pet_clinic_integration.TestPetClinicIntegration object at 0x000001C8D6FB1F90>\n\n    @pytest.mark.asyncio\n    async def test_load_pet_clinics_with_mock_api(self):\n        \"\"\"Test load_pet_clinics function with mocked API response.\"\"\"\n        # Mock API response\n        mock_response = {\n            \"LOCALDATA_020301\": {\n                \"row\": [\n                    {\n                        \"OPNSFTEAMCODE\": \"TEST001\",\n                        \"MGTNO\": \"1234567890\",\n                        \"APVPERMYMD\": \"20240101\",\n                        \"APVCANCELYMD\": \"\",\n                        \"TRDSTATEGBN\": \"01\",\n                        \"TRDSTATENM\": \"영업\",\n                        \"DTLSTATEGBN\": \"01\",\n                        \"DTLSTATENM\": \"영업\",\n                        \"DCBYMD\": \"\",\n                        \"CLGSTDT\": \"\",\n                        \"CLGENDDT\": \"\",\n                        \"ROPNYMD\": \"20240101\",\n                        \"SITETEL\": \"02-1234-5678\",\n                        \"SITEAREA\": \"100.5\",\n                        \"SITEPOSTNO\": \"12345\",\n                        \"SITEWHLADDR\": \"서울시 강남구 테스트로 123\",\n                        \"RDNWHLADDR\": \"서울시 강남구 테스트로 123\",\n                        \"RDNPOSTNO\": \"12345\",\n                        \"BPLCNM\": \"테스트 동물병원\",\n                        \"LASTMODTS\": \"20240101120000\",\n                        \"UPDATEGBN\": \"I\",\n                        \"UPDATEDT\": \"20240101\",\n                        \"UPTAENM\": \"테스트\",\n                        \"X\": \"127.123456\",\n                        \"Y\": \"37.123456\",\n                        \"LINDJOBGBNNM\": \"동물병원\",\n                        \"LINDPRCBGBNNM\": \"동물병원\",\n                        \"LINDSEQNO\": \"001\",\n                        \"RGTMBDSNO\": \"1234567890\",\n                        \"TOTEPNUM\": \"5\"\n                    }\n                ]\n            }\n        }\n    \n        # Mock environment variable\n        with patch.dict(os.environ, {\"SEOUL_OPEN_API_KEY\": \"test_key\"}):\n            # Mock httpx.AsyncClient\n            with patch(\"httpx.AsyncClient\") as mock_client_class:\n                mock_client = AsyncMock()\n                mock_response_obj = AsyncMock()\n                mock_response_obj.json.return_value = mock_response\n                mock_client.get = AsyncMock(return_value=mock_response_obj)\n                mock_client_class.return_value.__aenter__.return_value = mock_client\n    \n                # Mock database session\n                with patch(\"app.api.v1.endpoints.pet_clinic.get_db\") as mock_get_db:\n                    mock_db = AsyncMock()\n                    mock_get_db.return_value = mock_db\n    \n                    # Call the function\n>                   result = await load_pet_clinics(start=1, end=1)\n                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\ntests\\integration\\test_pet_clinic_integration.py:75: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nstart = 1, end = 1, db = Depends(get_db)\n\n    @router.get(\"/load-pet-clinics\", response_model=List[ClinicRow], responses={\n        200: {\"description\": \"INFO-000: 정상 처리되었습니다.\"},\n        400: {\"description\": \"ERROR-300~336: 요청 인자 오류 또는 샘플 범위 초과\"},\n        401: {\"description\": \"INFO-100: 인증키가 유효하지 않습니다.\"},\n        404: {\"description\": \"INFO-200: 해당하는 데이터가 없습니다.\"},\n        500: {\"description\": \"ERROR-500~601: 서버 또는 SQL 오류\"}\n    })\n    async def load_pet_clinics(start: int = 1, end: int = 5, db: AsyncSession = Depends(get_db)):\n        API_KEY = os.getenv(\"SEOUL_OPEN_API_KEY\", \"sample\")\n        url = f\"http://openapi.seoul.go.kr:8088/{API_KEY}/json/LOCALDATA_020301/{start}/{end}/\"\n    \n        async with httpx.AsyncClient() as client:\n            response = await client.get(url)\n            data = response.json()\n    \n>       rows = data.get(\"LOCALDATA_020301\", {}).get(\"row\", [])\n               ^^^^^^^^\nE       AttributeError: 'coroutine' object has no attribute 'get'\n\napp\\api\\v1\\endpoints\\pet_clinic.py:33: AttributeError\n______________ TestPetClinicIntegration.test_api_client_timeout _______________\n\n    @contextlib.contextmanager\n    def map_httpcore_exceptions() -> typing.Iterator[None]:\n        global HTTPCORE_EXC_MAP\n        if len(HTTPCORE_EXC_MAP) == 0:\n            HTTPCORE_EXC_MAP = _load_httpcore_exceptions()\n        try:\n>           yield\n\n.venv\\Lib\\site-packages\\httpx\\_transports\\default.py:101: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n.venv\\Lib\\site-packages\\httpx\\_transports\\default.py:394: in handle_async_request\n    resp = await self._pool.handle_async_request(req)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n.venv\\Lib\\site-packages\\httpcore\\_async\\connection_pool.py:256: in handle_async_request\n    raise exc from None\n.venv\\Lib\\site-packages\\httpcore\\_async\\connection_pool.py:236: in handle_async_request\n    response = await connection.handle_async_request(\n.venv\\Lib\\site-packages\\httpcore\\_async\\connection.py:103: in handle_async_request\n    return await self._connection.handle_async_request(request)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n.venv\\Lib\\site-packages\\httpcore\\_async\\http11.py:136: in handle_async_request\n    raise exc\n.venv\\Lib\\site-packages\\httpcore\\_async\\http11.py:106: in handle_async_request\n    ) = await self._receive_response_headers(**kwargs)\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n.venv\\Lib\\site-packages\\httpcore\\_async\\http11.py:177: in _receive_response_headers\n    event = await self._receive_event(timeout=timeout)\n            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n.venv\\Lib\\site-packages\\httpcore\\_async\\http11.py:217: in _receive_event\n    data = await self._network_stream.read(\n.venv\\Lib\\site-packages\\httpcore\\_backends\\anyio.py:32: in read\n    with map_exceptions(exc_map):\n         ^^^^^^^^^^^^^^^^^^^^^^^\nC:\\Program Files\\WindowsApps\\PythonSoftwareFoundation.Python.3.13_3.13.1520.0_x64__qbz5n2kfra8p0\\Lib\\contextlib.py:162: in __exit__\n    self.gen.throw(value)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nmap = {<class 'TimeoutError'>: <class 'httpcore.ReadTimeout'>, <class 'anyio.BrokenResourceError'>: <class 'httpcore.ReadErr... 'anyio.ClosedResourceError'>: <class 'httpcore.ReadError'>, <class 'anyio.EndOfStream'>: <class 'httpcore.ReadError'>}\n\n    @contextlib.contextmanager\n    def map_exceptions(map: ExceptionMapping) -> typing.Iterator[None]:\n        try:\n            yield\n        except Exception as exc:  # noqa: PIE786\n            for from_exc, to_exc in map.items():\n                if isinstance(exc, from_exc):\n>                   raise to_exc(exc) from exc\nE                   httpcore.ReadTimeout\n\n.venv\\Lib\\site-packages\\httpcore\\_exceptions.py:14: ReadTimeout\n\nThe above exception was the direct cause of the following exception:\n\nself = <app.api.common.client.APIClient object at 0x000001C8D81A1CD0>\nmethod = 'GET', endpoint = 'delay/5', params = None, data = None, headers = None\n\n    async def _make_request(self, method: str, endpoint: str,\n                           params: Optional[Dict[str, Any]] = None,\n                           data: Optional[Dict[str, Any]] = None,\n                           headers: Optional[Dict[str, str]] = None) -> Dict[str, Any]:\n        \"\"\"\n        Make an HTTP request.\n    \n        Args:\n            method: HTTP method (GET, POST, etc.)\n            endpoint: API endpoint\n            params: Query parameters\n            data: Request body data\n            headers: Additional headers\n    \n        Returns:\n            Response data as dictionary\n    \n        Raises:\n            APIError: For API-related errors\n            ConnectionError: For connection errors\n            TimeoutError: For timeout errors\n        \"\"\"\n        await self._ensure_client()\n    \n        url = self._build_url(endpoint, params)\n        request_headers = {**self.headers, **(headers or {})}\n    \n        logger.info(f\"Making {method} request to {url}\")\n    \n        try:\n>           response = await self._client.request(\n                method=method,\n                url=url,\n                params=params,\n                json=data,\n                headers=request_headers\n            )\n\napp\\api\\common\\client.py:109: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n.venv\\Lib\\site-packages\\httpx\\_client.py:1540: in request\n    return await self.send(request, auth=auth, follow_redirects=follow_redirects)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n.venv\\Lib\\site-packages\\httpx\\_client.py:1629: in send\n    response = await self._send_handling_auth(\n.venv\\Lib\\site-packages\\httpx\\_client.py:1657: in _send_handling_auth\n    response = await self._send_handling_redirects(\n.venv\\Lib\\site-packages\\httpx\\_client.py:1694: in _send_handling_redirects\n    response = await self._send_single_request(request)\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n.venv\\Lib\\site-packages\\httpx\\_client.py:1730: in _send_single_request\n    response = await transport.handle_async_request(request)\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n.venv\\Lib\\site-packages\\httpx\\_transports\\default.py:393: in handle_async_request\n    with map_httpcore_exceptions():\n         ^^^^^^^^^^^^^^^^^^^^^^^^^\nC:\\Program Files\\WindowsApps\\PythonSoftwareFoundation.Python.3.13_3.13.1520.0_x64__qbz5n2kfra8p0\\Lib\\contextlib.py:162: in __exit__\n    self.gen.throw(value)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    @contextlib.contextmanager\n    def map_httpcore_exceptions() -> typing.Iterator[None]:\n        global HTTPCORE_EXC_MAP\n        if len(HTTPCORE_EXC_MAP) == 0:\n            HTTPCORE_EXC_MAP = _load_httpcore_exceptions()\n        try:\n            yield\n        except Exception as exc:\n            mapped_exc = None\n    \n            for from_exc, to_exc in HTTPCORE_EXC_MAP.items():\n                if not isinstance(exc, from_exc):\n                    continue\n                # We want to map to the most specific exception we can find.\n                # Eg if `exc` is an `httpcore.ReadTimeout`, we want to map to\n                # `httpx.ReadTimeout`, not just `httpx.TimeoutException`.\n                if mapped_exc is None or issubclass(to_exc, mapped_exc):\n                    mapped_exc = to_exc\n    \n            if mapped_exc is None:  # pragma: no cover\n                raise\n    \n            message = str(exc)\n>           raise mapped_exc(message) from exc\nE           httpx.ReadTimeout\n\n.venv\\Lib\\site-packages\\httpx\\_transports\\default.py:118: ReadTimeout\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests.integration.test_pet_clinic_integration.TestPetClinicIntegration object at 0x000001C8D6EEF680>\n\n    @pytest.mark.asyncio\n    async def test_api_client_timeout(self):\n        \"\"\"Test API client timeout handling.\"\"\"\n        # Use a slow endpoint to test timeout\n        async with APIClient(\"https://httpbin.org\", timeout=1) as client:\n            # This should timeout\n            with pytest.raises(TimeoutError):\n>               await client.get(\"delay/5\")\n\ntests\\integration\\test_pet_clinic_integration.py:153: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\napp\\api\\common\\client.py:164: in get\n    return await self._make_request(\"GET\", endpoint, params=params, headers=headers)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <app.api.common.client.APIClient object at 0x000001C8D81A1CD0>\nmethod = 'GET', endpoint = 'delay/5', params = None, data = None, headers = None\n\n    async def _make_request(self, method: str, endpoint: str,\n                           params: Optional[Dict[str, Any]] = None,\n                           data: Optional[Dict[str, Any]] = None,\n                           headers: Optional[Dict[str, str]] = None) -> Dict[str, Any]:\n        \"\"\"\n        Make an HTTP request.\n    \n        Args:\n            method: HTTP method (GET, POST, etc.)\n            endpoint: API endpoint\n            params: Query parameters\n            data: Request body data\n            headers: Additional headers\n    \n        Returns:\n            Response data as dictionary\n    \n        Raises:\n            APIError: For API-related errors\n            ConnectionError: For connection errors\n            TimeoutError: For timeout errors\n        \"\"\"\n        await self._ensure_client()\n    \n        url = self._build_url(endpoint, params)\n        request_headers = {**self.headers, **(headers or {})}\n    \n        logger.info(f\"Making {method} request to {url}\")\n    \n        try:\n            response = await self._client.request(\n                method=method,\n                url=url,\n                params=params,\n                json=data,\n                headers=request_headers\n            )\n    \n            logger.info(f\"Response status: {response.status_code}\")\n    \n            # Handle different status codes\n            if response.status_code >= 200 and response.status_code < 300:\n                return response.json()\n            elif response.status_code >= 400 and response.status_code < 500:\n                raise ClientError(\n                    f\"Client error: {response.status_code}\",\n                    status_code=response.status_code,\n                    response_data=response.json() if response.content else {}\n                )\n            else:\n                raise APIError(\n                    f\"Server error: {response.status_code}\",\n                    status_code=response.status_code,\n                    response_data=response.json() if response.content else {}\n                )\n    \n        except httpx.ConnectError as e:\n            logger.error(f\"Connection error: {e}\")\n            raise ConnectionError(f\"Failed to connect to {url}: {e}\")\n        except httpx.TimeoutException as e:\n            logger.error(f\"Timeout error: {e}\")\n>           raise TimeoutError(f\"Request timeout for {url}: {e}\")\nE           app.api.common.exceptions.TimeoutError: Request timeout for https://httpbin.org/delay/5:\n\napp\\api\\common\\client.py:140: TimeoutError\n---------------------------- Captured stderr call -----------------------------\n2025-07-30 01:37:35,613 | INFO | app.api.common.client | Making GET request to https://httpbin.org/delay/5\n2025-07-30 01:37:37,213 | ERROR | app.api.common.client | Timeout error: \n------------------------------ Captured log call ------------------------------\nINFO     app.api.common.client:client.py:106 Making GET request to https://httpbin.org/delay/5\nERROR    app.api.common.client:client.py:139 Timeout error:\n___________________ TestAPIClient.test_get_request_success ____________________\n\nself = <tests.unit.test_api_client.TestAPIClient object at 0x000001C8D6FA7770>\nmock_api_client = <app.api.common.client.APIClient object at 0x000001C8D8208250>\nsample_api_response = {'data': {'description': 'Test description', 'id': 1, 'name': 'Test Data'}, 'status': 'success'}\n\n    @pytest.mark.asyncio\n    async def test_get_request_success(self, mock_api_client, sample_api_response):\n        \"\"\"Test successful GET request.\"\"\"\n        # Mock the response\n        mock_response = AsyncMock()\n        mock_response.status_code = 200\n        mock_response.json = AsyncMock(return_value=sample_api_response)\n        mock_response.content = b'{\"status\": \"success\"}'\n    \n        mock_api_client._client.request = AsyncMock(return_value=mock_response)\n    \n        # Make request\n        result = await mock_api_client.get(\"test-endpoint\")\n    \n        # Verify request was made correctly\n        mock_api_client._client.request.assert_called_once()\n        call_args = mock_api_client._client.request.call_args\n        assert call_args[1][\"method\"] == \"GET\"\n        assert \"test-endpoint\" in call_args[1][\"url\"]\n    \n        # Verify response\n>       assert result == sample_api_response\nE       AssertionError: assert <coroutine object AsyncMockMixin._execute_mock_call at 0x000001C8D8209040> == {'data': {'description': 'Test description', 'id': 1, 'name': 'Test Data'}, 'status': 'success'}\n\ntests\\unit\\test_api_client.py:77: AssertionError\n---------------------------- Captured stderr call -----------------------------\n2025-07-30 01:37:38,404 | INFO | app.api.common.client | Making GET request to http://test.api.com/test-endpoint\n2025-07-30 01:37:38,405 | INFO | app.api.common.client | Response status: 200\n------------------------------ Captured log call ------------------------------\nINFO     app.api.common.client:client.py:106 Making GET request to http://test.api.com/test-endpoint\nINFO     app.api.common.client:client.py:117 Response status: 200\n___________________ TestAPIClient.test_post_request_success ___________________\n\nself = <tests.unit.test_api_client.TestAPIClient object at 0x000001C8D6EEF460>\nmock_api_client = <app.api.common.client.APIClient object at 0x000001C8D82015E0>\nsample_api_response = {'data': {'description': 'Test description', 'id': 1, 'name': 'Test Data'}, 'status': 'success'}\n\n    @pytest.mark.asyncio\n    async def test_post_request_success(self, mock_api_client, sample_api_response):\n        \"\"\"Test successful POST request.\"\"\"\n        # Mock the response\n        mock_response = AsyncMock()\n        mock_response.status_code = 200\n        mock_response.json = AsyncMock(return_value=sample_api_response)\n        mock_response.content = b'{\"status\": \"success\"}'\n    \n        mock_api_client._client.request = AsyncMock(return_value=mock_response)\n    \n        # Test data\n        data = {\"name\": \"test\", \"value\": 123}\n    \n        # Make request\n        result = await mock_api_client.post(\"test-endpoint\", data=data)\n    \n        # Verify request was made correctly\n        mock_api_client._client.request.assert_called_once()\n        call_args = mock_api_client._client.request.call_args\n        assert call_args[1][\"method\"] == \"POST\"\n        assert call_args[1][\"json\"] == data\n    \n        # Verify response\n>       assert result == sample_api_response\nE       AssertionError: assert <coroutine object AsyncMockMixin._execute_mock_call at 0x000001C8D8208540> == {'data': {'description': 'Test description', 'id': 1, 'name': 'Test Data'}, 'status': 'success'}\n\ntests\\unit\\test_api_client.py:103: AssertionError\n---------------------------- Captured stderr call -----------------------------\n2025-07-30 01:37:38,426 | INFO | app.api.common.client | Making POST request to http://test.api.com/test-endpoint\n2025-07-30 01:37:38,426 | INFO | app.api.common.client | Response status: 200\n------------------------------ Captured log call ------------------------------\nINFO     app.api.common.client:client.py:106 Making POST request to http://test.api.com/test-endpoint\nINFO     app.api.common.client:client.py:117 Response status: 200\n============================== warnings summary ===============================\n.venv\\Lib\\site-packages\\pydantic\\_internal\\_config.py:323\n.venv\\Lib\\site-packages\\pydantic\\_internal\\_config.py:323\n.venv\\Lib\\site-packages\\pydantic\\_internal\\_config.py:323\n  C:\\Users\\sbkyo\\Development\\pet-happy-living-api\\.venv\\Lib\\site-packages\\pydantic\\_internal\\_config.py:323: PydanticDeprecatedSince20: Support for class-based `config` is deprecated, use ConfigDict instead. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/\n    warnings.warn(DEPRECATION_MESSAGE, DeprecationWarning)\n\napp\\models\\users.py:7\n  C:\\Users\\sbkyo\\Development\\pet-happy-living-api\\app\\models\\users.py:7: MovedIn20Warning: The ``declarative_base()`` function is now available as sqlalchemy.orm.declarative_base(). (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)\n    Base = declarative_base()\n\n.venv\\Lib\\site-packages\\pydantic\\_internal\\_config.py:373\n  C:\\Users\\sbkyo\\Development\\pet-happy-living-api\\.venv\\Lib\\site-packages\\pydantic\\_internal\\_config.py:373: UserWarning: Valid config keys have changed in V2:\n  * 'orm_mode' has been renamed to 'from_attributes'\n    warnings.warn(message, UserWarning)\n\napp\\models\\pet_clinic.py:9\n  C:\\Users\\sbkyo\\Development\\pet-happy-living-api\\app\\models\\pet_clinic.py:9: MovedIn20Warning: The ``declarative_base()`` function is now available as sqlalchemy.orm.declarative_base(). (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)\n    Base = declarative_base()\n\napp\\main.py:14\n  C:\\Users\\sbkyo\\Development\\pet-happy-living-api\\app\\main.py:14: DeprecationWarning: \n          on_event is deprecated, use lifespan event handlers instead.\n  \n          Read more about it in the\n          [FastAPI docs for Lifespan Events](https://fastapi.tiangolo.com/advanced/events/).\n          \n    @app.on_event(\"startup\")\n\n.venv\\Lib\\site-packages\\fastapi\\applications.py:4495\n.venv\\Lib\\site-packages\\fastapi\\applications.py:4495\n  C:\\Users\\sbkyo\\Development\\pet-happy-living-api\\.venv\\Lib\\site-packages\\fastapi\\applications.py:4495: DeprecationWarning: \n          on_event is deprecated, use lifespan event handlers instead.\n  \n          Read more about it in the\n          [FastAPI docs for Lifespan Events](https://fastapi.tiangolo.com/advanced/events/).\n          \n    return self.router.on_event(event_type)\n\napp\\main.py:30\n  C:\\Users\\sbkyo\\Development\\pet-happy-living-api\\app\\main.py:30: DeprecationWarning: \n          on_event is deprecated, use lifespan event handlers instead.\n  \n          Read more about it in the\n          [FastAPI docs for Lifespan Events](https://fastapi.tiangolo.com/advanced/events/).\n          \n    @app.on_event(\"shutdown\")\n\ntests/integration/test_pet_clinic_integration.py::TestPetClinicIntegration::test_api_client_with_real_endpoint\n  C:\\Users\\sbkyo\\Development\\pet-happy-living-api\\.venv\\Lib\\site-packages\\h11\\_util.py:116: RuntimeWarning: coroutine 'AsyncMockMixin._execute_mock_call' was never awaited\n    v = super().__new__(cls, name, bases, namespace, **kwds)\n  Enable tracemalloc to get traceback where the object was allocated.\n  See https://docs.pytest.org/en/stable/how-to/capture-warnings.html#resource-warnings for more info.\n\ntests/unit/test_api_client.py::TestAPIClient::test_all_http_methods\n  C:\\Program Files\\WindowsApps\\PythonSoftwareFoundation.Python.3.13_3.13.1520.0_x64__qbz5n2kfra8p0\\Lib\\unittest\\mock.py:2247: RuntimeWarning: coroutine 'AsyncMockMixin._execute_mock_call' was never awaited\n    def __init__(self, name, parent):\n  Enable tracemalloc to get traceback where the object was allocated.\n  See https://docs.pytest.org/en/stable/how-to/capture-warnings.html#resource-warnings for more info.\n\ntests/unit/test_api_client.py::TestAPIClient::test_all_http_methods\n  C:\\Users\\sbkyo\\Development\\pet-happy-living-api\\tests\\unit\\test_api_client.py:186: RuntimeWarning: coroutine 'AsyncMockMixin._execute_mock_call' was never awaited\n    await getattr(mock_api_client, method)(\"test-endpoint\")\n  Enable tracemalloc to get traceback where the object was allocated.\n  See https://docs.pytest.org/en/stable/how-to/capture-warnings.html#resource-warnings for more info.\n\ntests/unit/test_api_client.py::TestAPIClient::test_all_http_methods\n  C:\\Users\\sbkyo\\Development\\pet-happy-living-api\\tests\\unit\\test_api_client.py:184: RuntimeWarning: coroutine 'AsyncMockMixin._execute_mock_call' was never awaited\n    await getattr(mock_api_client, method)(\"test-endpoint\", data=test_data)\n  Enable tracemalloc to get traceback where the object was allocated.\n  See https://docs.pytest.org/en/stable/how-to/capture-warnings.html#resource-warnings for more info.\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n--------------------------------- JSON report ---------------------------------\nreport auto-save skipped\n=========================== short test summary info ===========================\nFAILED tests/integration/test_pet_clinic_integration.py::TestPetClinicIntegration::test_load_pet_clinics_with_mock_api\nFAILED tests/integration/test_pet_clinic_integration.py::TestPetClinicIntegration::test_api_client_timeout\nFAILED tests/unit/test_api_client.py::TestAPIClient::test_get_request_success\nFAILED tests/unit/test_api_client.py::TestAPIClient::test_post_request_success\n================= 4 failed, 13 passed, 14 warnings in 16.22s ==================\n",
  "stderr": "C:\\Users\\sbkyo\\Development\\pet-happy-living-api\\.venv\\Lib\\site-packages\\_pytest\\unraisableexception.py:33: RuntimeWarning: coroutine 'AsyncMockMixin._execute_mock_call' was never awaited\n  gc.collect()\nRuntimeWarning: Enable tracemalloc to get the object allocation traceback\n",
  "return_code": 1
}